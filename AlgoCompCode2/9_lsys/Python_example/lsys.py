#!/usr/bin/python# -*- coding: latin-1 -*-""" A simple Lindenmayer system, using symbols@author: Øyvind Brandtsegg@contact: obrandts@gmail.com@license: GPL"""class Lindenmayer:    def __init__(self): # this method is called when the class is instantiated        self.symbols = ['A','B','C']        self.rules = {'A': ['C','A','B'],                      'B': ['A'],                      'C': ['B','C']}        self.map = {'A': -5, 'B':-2, 'C':7}            def get_data(self, symbolNum, i):        parent = self.symbols[int(symbolNum)]        child = self.rules[parent][int(i)]        size = len(self.rules[parent])        interval = self.map[child]        symbol_num = self.symbols.index(child)        return float(symbol_num), float(interval), float(size)            def set_map(self, key, val):        self.map[key] = val    def set_rules(self, key, val):        self.rules[key] = val    def lsys(self, input):        output = []        for key,value in self.rules.iteritems():            if key == input:                output.extend(value)        return output# testif __name__ == '__main__' :    l = Lindenmayer()    print('testing get data:')    axiom = 0    index = 0    N = 2    print('starting with axiom ', l.symbols[axiom])    while index < N:        symbol_num, interval, N = l.get_data(axiom,index)        index += 1        print(symbol_num, interval, N, index, l.symbols[int(symbol_num)])